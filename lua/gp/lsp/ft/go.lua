return {
	template = "func gp_lsp_probe() {\n  \n}",
    suffixes = { ". " },
	root_ignore = {
		Class = {
			bool = "",
			byte = "",
			complex128 = "",
			complex64 = "",
			float32 = "",
			float64 = "",
			int = "",
			int16 = "",
			int32 = "",
			int64 = "",
			int8 = "",
			rune = "",
			string = "",
			uint = "",
			uint16 = "",
			uint32 = "",
			uint64 = "",
			uint8 = "",
			uintptr = "",
		},
		Constant = {
			["false"] = "",
			["true"] = "",
		},
		Function = {
			append = "func(slice []Type, elems ...Type) []Type",
			cap = "func(v Type) int",
			clear = "func(t T)",
			close = "func(c chan<- Type)",
			complex = "func(r float64, i float64) complex128",
			copy = "func(dst []Type, src []Type) int",
			delete = "func(m map[Type]Type1, key Type)",
			gp_lsp_probe = "func()",
			imag = "func(c complex128) float64",
			len = "func(v Type) int",
			make = "func(t Type, size ...int) Type",
			max = "func(x T, y ...T) T",
			min = "func(x T, y ...T) T",
			new = "func(Type) *Type",
			panic = "func(v any)",
			print = "func(args ...Type)",
			println = "func(args ...Type)",
			real = "func(c complex128) float64",
			recover = "func() any",
		},
		Interface = {
			any = "",
			comparable = "",
			error = "",
		},
		Variable = {
			["nil"] = "",
		},
	},
}
